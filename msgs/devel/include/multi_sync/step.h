// Generated by gencpp from file multi_sync/step.msg
// DO NOT EDIT!


#ifndef MULTI_SYNC_MESSAGE_STEP_H
#define MULTI_SYNC_MESSAGE_STEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace multi_sync
{
template <class ContainerAllocator>
struct step_
{
  typedef step_<ContainerAllocator> Type;

  step_()
    : header()
    , robot_id(0)
    , state(0)
    , first_location(0)
    , second_location(0)
    , is_the_last(false)
    , area()  {
    }
  step_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_id(0)
    , state(0)
    , first_location(0)
    , second_location(0)
    , is_the_last(false)
    , area(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef int32_t _state_type;
  _state_type state;

   typedef int32_t _first_location_type;
  _first_location_type first_location;

   typedef int32_t _second_location_type;
  _second_location_type second_location;

   typedef uint8_t _is_the_last_type;
  _is_the_last_type is_the_last;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _area_type;
  _area_type area;




  typedef boost::shared_ptr< ::multi_sync::step_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_sync::step_<ContainerAllocator> const> ConstPtr;

}; // struct step_

typedef ::multi_sync::step_<std::allocator<void> > step;

typedef boost::shared_ptr< ::multi_sync::step > stepPtr;
typedef boost::shared_ptr< ::multi_sync::step const> stepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_sync::step_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_sync::step_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace multi_sync

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'multi_sync': ['/home/lizi/msgs/src/multi_sync/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::multi_sync::step_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_sync::step_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_sync::step_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_sync::step_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_sync::step_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_sync::step_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_sync::step_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68cd35e82dc4acec3d0b16f37c8d7b75";
  }

  static const char* value(const ::multi_sync::step_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68cd35e82dc4acecULL;
  static const uint64_t static_value2 = 0x3d0b16f37c8d7b75ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_sync::step_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_sync/step";
  }

  static const char* value(const ::multi_sync::step_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_sync::step_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 robot_id\n\
int32 state\n\
int32 first_location\n\
int32 second_location\n\
bool is_the_last\n\
string area\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::multi_sync::step_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_sync::step_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_id);
      stream.next(m.state);
      stream.next(m.first_location);
      stream.next(m.second_location);
      stream.next(m.is_the_last);
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct step_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_sync::step_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_sync::step_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "first_location: ";
    Printer<int32_t>::stream(s, indent + "  ", v.first_location);
    s << indent << "second_location: ";
    Printer<int32_t>::stream(s, indent + "  ", v.second_location);
    s << indent << "is_the_last: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_the_last);
    s << indent << "area: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_SYNC_MESSAGE_STEP_H
